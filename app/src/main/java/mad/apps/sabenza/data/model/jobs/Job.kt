/*
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * OpenAPI spec version: 0.4.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package mad.apps.sabenza.data.model.jobs

import com.google.gson.TypeAdapter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.annotations.SerializedName
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import io.swagger.annotations.ApiModelProperty
import mad.apps.sabenza.data.util.DateUtil
import java.io.IOException
import java.util.*

/**
 * Jobs
 */
data class Job(
        /**
         * Get projectId
         * @return projectId
         */
        @SerializedName("project_id")
        @get:ApiModelProperty(value = "")
        val projectId: Int? = null,

        /**
         * Get skillId
         * @return skillId
         */
        @SerializedName("skill_id")
        @get:ApiModelProperty(value = "")
        val skillId: String? = null,

        /**
         * Get location
         * @return location
         */
        @SerializedName("location")
        @get:ApiModelProperty(value = "")
        val location: String? = null,

        /**
         * Get description
         * @return description
         */
        @SerializedName("description")
        @get:ApiModelProperty(value = "")
        var description: String? = null,

        /**
         * Get quantity
         * @return quantity
         */
        @SerializedName("quantity")
        @get:ApiModelProperty(value = "")
        val quantity: String? = null,

        /**
         * Get duration
         * @return duration
         */
        @SerializedName("duration")
        @get:ApiModelProperty(value = "")
        val duration: String? = null,

        /**
         * Get startDate
         * @return startDate
         */
        @SerializedName("start_date")
        @get:ApiModelProperty(value = "")
        val startDate: String? = null,

        /**
         * Get endDate
         * @return endDate
         */
        @SerializedName("end_date")
        @get:ApiModelProperty(value = "")
        val endDate: String? = null,

        /**
         * Get creditCardId
         * @return creditCardId
         */
        @SerializedName("credit_card_id")
        @get:ApiModelProperty(value = "")
        val creditCardId: Int? = null



) {

    /**
     * Get addressId
     * @return addressId
     */
    @SerializedName("address_id")
    @get:ApiModelProperty(value = "")
    val addressId: Int? = null

    /**
     * Get id
     * @return id
     */
    @SerializedName("id")
    @get:ApiModelProperty(value = "")
    val id: String? = null

    /**
     * Get employerId
     * @return employerId
     */
    @SerializedName("employer_id")
    @get:ApiModelProperty(value = "")
    val employerId: Int? = null

    /**
     * Get state
     * @return state
     */
    @SerializedName("state")
    @get:ApiModelProperty(value = "")
    val state: JobStateEnum? = null

    /**
     * Get filled
     * @return filled
     */
    @SerializedName("filled")
    @get:ApiModelProperty(value = "")
    val filled: String? = null

    /**
     * Get rate
     * @return rate
     */
    @SerializedName("rate")
    @get:ApiModelProperty(value = "")
    val rate: String? = null

    /**
     * Gets or Sets state
     */
    @JsonAdapter(JobStateEnum.Adapter::class)
    enum class JobStateEnum private constructor(val value: String) {
        DRAFT("Draft"),

        POSTED("Posted"),

        CONFIRMED("Confirmed"),

        COMPLETED("Completed"),

        DELETED("Deleted");

        override fun toString(): String {
            return value.toString()
        }

        class Adapter : TypeAdapter<JobStateEnum>() {
            @Throws(IOException::class)
            override fun write(jsonWriter: JsonWriter, enumeration: JobStateEnum) {
                jsonWriter.value(enumeration.value)
            }

            @Throws(IOException::class)
            override fun read(jsonReader: JsonReader): JobStateEnum {
                val value = jsonReader.nextString()
                return JobStateEnum.fromValue(value.toString())!!
            }
        }

        companion object {

            fun fromValue(text: String): JobStateEnum? {
                for (b in JobStateEnum.values()) {
                    if (b.value.toString() == text) {
                        return b
                    }
                }
                return null
            }
        }
    }

    fun calculateStartDate(): Calendar {
        return DateUtil.dateStringToCalendar(startDate!!)
    }

    fun calculateEndDate(): Calendar {
        return DateUtil.dateStringToCalendar(endDate!!)
    }

}


